{"version":3,"file":"cubing.js","sourceRoot":"","sources":["../src/cubing.ts"],"names":[],"mappings":"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","sourcesContent":["// THREE is loaded in this script in the settings tab\n\nlet canvas;\nlet renderer;\nlet scene;\nlet camera;\nlet group;\n\n// Face indexes\nconst UP = 0;\nconst FRONT = 1;\nconst RIGHT = 2;\nconst BACK = 3;\nconst LEFT = 4;\nconst DOWN = 5;\n\nconst colors = ['white', 'green', 'red', 'blue', 'orange', 'yellow'];\n\n// Space between cubies (of unit dimension)\nconst OFFSET = 1.1;\nconst SIZE = 3;\n\n// Radians per millisecond\nconst SPEED = 2 * Math.PI / 1000;\n\nconst animationQueue = [];\nlet currentAction;\nlet startTime;\nlet lastTime;\nlet speed;\n\nconst faceNormals = [\n    [0, 1, 0],\n    [0, 0, 1],\n    [1, 0, 0],\n    [0, 0, -1],\n    [-1, 0, 0],\n    [0, -1, 0]\n];\n\nconst AXES = {\n    x: new THREE.Vector3(1, 0, 0),\n    y: new THREE.Vector3(0, 1, 0),\n    z: new THREE.Vector3(0, 0, 1),\n};\n\n// Stationary cubies\nlet staticGroup;\n// Currently rotating cubies\nlet movingGroup;\n\n// Array of all created cubies and their current\n// location in the cube.\nconst cubies = [];\nlet movingCubies;\n\nconst ACTIONS = {\n    x: {\n        axis: 'x',\n        turns: 1,\n        selection: {},\n    },\n    y: {\n        axis: 'y',\n        turns: 1,\n        selection: {},\n    },\n    z: {\n        axis: 'z',\n        turns: 1,\n        selection: {},\n    },\n    r: {\n        axis: 'x',\n        turns: 1,\n        selection: {col: SIZE - 1},\n    },\n    f: {\n        axis: 'z',\n        turns: 1,\n        selection: {depth: 0},\n    },\n    u: {\n        axis: 'y',\n        turns: 1,\n        selection: {row: SIZE - 1},\n    },\n    l: {\n        axis: 'x',\n        turns: -1,\n        selection: {col: 0},\n    },\n    b: {\n        axis: 'z',\n        turns: -1,\n        selection: {depth: SIZE - 1},\n    },\n    d: {\n        axis: 'y',\n        turns: -1,\n        selection: {row: 0},\n    },\n    m: {\n        axis: 'x',\n        turns: -1,\n        selection: {col: 1},\n    },\n    e: {\n        axis: 'y',\n        turns: -1,\n        selection: {row: 1},\n    },\n    s: {\n        axis: 'z',\n        turns: 1,\n        selection: {depth: 1},\n    },\n};\n\n// Initialize THREE.js scene and build a Cubing Cube.\nfunction init() {\n    canvas = document.getElementById(\"render-canvas\");\n    scene = new THREE.Scene();\n    renderer = new THREE.WebGLRenderer({canvas: canvas});\n    camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000);\n    scene.background = new THREE.Color(0x202020);\n\n    camera.position.x = SIZE;\n    camera.position.y = SIZE;\n    camera.position.z = SIZE * 1.8;\n    camera.lookAt(0, 0, 0);\n    renderer.setSize(canvas.offsetWidth, canvas.offsetHeight);\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xe0e0e0, 1);\n    scene.add(light);\n\n    staticGroup = buildCube(SIZE);\n    scene.add(staticGroup);\n    movingGroup = new THREE.Group();\n    scene.add(movingGroup);\n\n    window.addEventListener(\"keydown\", handleKey);\n\n    renderer.render(scene, camera);\n\n    requestAnimationFrame(render);\n}\n\nfunction handleKey(ev) {\n    const key = ev.key.toLowerCase();\n\n    if (ACTIONS[key] === undefined) {\n        console.log(\"Unknown key: \" + key);\n        return;\n    }\n\n    const action = {...ACTIONS[key]};\n    // Reverse direction if shift key is pressed\n    if (ev.shiftKey) {\n        action.turns = -action.turns;\n    }\n\n    animationQueue.push(action);\n}\n\n// This is the animation loop.  We update the cube's orientation\n// to make it look like it is spinning.\nfunction render(millis) {\n    requestAnimationFrame(render);\n\n    if (currentAction === undefined) {\n        initAnimation(millis);\n        return;\n    }\n\n    animate(millis);\n\n    renderer.render(scene, camera);\n}\n\nfunction initAnimation(millis) {\n    if (animationQueue.length === 0) {\n        return;\n    }\n\n    currentAction = animationQueue.shift();\n    startTime = millis;\n    const angle = -currentAction.turns * Math.PI / 2;\n    speed = (angle >= 0 ? 1 : -1) * SPEED;\n    endTime = startTime + angle / speed;\n    lastTime = millis;\n\n    movingCubies = selectCubies(currentAction.selection);\n    for (let cubie of movingCubies) {\n        movingGroup.attach(cubie.cubie);\n    }\n}\n\nfunction animate(millis) {\n    let elapsed = millis - lastTime;\n    if (millis > endTime) {\n        elapsed = endTime - lastTime;\n    }\n    lastTime = millis;\n\n    const angle = elapsed * speed;\n\n    const axis = AXES[currentAction.axis];\n    movingGroup.rotateOnWorldAxis(axis, angle);\n\n    if (millis > endTime) {\n        finishAnimation();\n    }\n}\n\nfunction finishAnimation() {\n    rotateCubies(movingCubies, currentAction.axis, currentAction.turns);\n    for (let cubie of movingCubies) {\n        staticGroup.attach(cubie.cubie);\n    }\n    currentAction = undefined;\n}\n\n// Make a whole cube by enumerating all the cubies\n// and adding them to a group.\nfunction buildCube(size, group) {\n    const cube = new THREE.Group();\n    for (let depth = 0; depth < size; depth++) {\n        for (let row = 0; row < size; row++) {\n            for (let col = 0; col < size; col++) {\n                const cubie = makeCubie(row, col, depth, size);\n                if (cubie !== null) {\n                    cubies.push({\n                        row, col, depth, cubie\n                    })\n                    cube.add(cubie);\n                }\n            }\n        }\n    }\n    return cube;\n}\n\n// Build a cubie with all it's visible faces\n// added to one object.  If the cubie is completely hidden\n// we return null.\nfunction makeCubie(row, column, depth, size) {\n    const g = new THREE.PlaneGeometry(1, 1);\n    const cubie = new THREE.Group();\n    const faces = facesOf(row, column, depth, size);\n    if (faces.length === 0) {\n        return null;\n    }\n\n    for (let face of faces) {\n        addFace(face, cubie);\n    }\n    cubie.position.x = (column - (size - 1)/2) * OFFSET;\n    cubie.position.y = (row - (size - 1)/2) * OFFSET;\n    cubie.position.z = -(depth - (size - 1)/2) * OFFSET;\n    return cubie;\n}\n\n// Add a face to a cubie (at the origin).\n// It will be oriented so that the visible face is\n// facing outward.\nfunction addFace(face, cubie) {\n    if (face === undefined) {\n        return;\n    }\n\n    // Default face is facing forward.\n    const g = new THREE.PlaneGeometry(1, 1);\n    const color = colors[face];\n    const normal = faceNormals[face];\n\n    const m = new THREE.MeshStandardMaterial({ color });\n    const sticker = new THREE.Mesh(g, m);\n\n    if (normal[0] !== 0) {\n        sticker.rotateY(Math.PI / 2 * normal[0]);\n    }\n    if (normal[1] !== 0) {\n        sticker.rotateX(-Math.PI / 2 * normal[1]);\n    }\n    if (normal[2] === -1) {\n        sticker.rotateX(Math.PI);\n    }\n\n    sticker.position.x = normal[0] / 2;\n    sticker.position.y = normal[1] / 2;\n    sticker.position.z = normal[2] / 2;\n\n    cubie.add(sticker);\n}\n\n// Return a list of the visible faces depending on the\n// coordinates of the cubie.\nfunction facesOf(row, column, depth, size) {\n    const faces = [];\n    if (row === 0) {\n        faces.push(DOWN)\n    }\n    if (row === size - 1) {\n        faces.push(UP);\n    }\n    if (column === 0) {\n        faces.push(LEFT);\n    }\n    if (column === size - 1) {\n        faces.push(RIGHT);\n    }\n    if (depth === 0) {\n        faces.push(FRONT);\n    }\n    if (depth === size - 1) {\n        faces.push(BACK);\n    }\n    return faces;\n}\n\nfunction selectCubies(attrs) {\n    const selected = [];\n\n    for (let cubie of cubies) {\n        if (match(attrs, cubie)) {\n            selected.push(cubie);\n        }\n    }\n\n    return selected;\n\n    function match(attrs, cubie) {\n        for (let [attr, value] of Object.entries(attrs)) {\n            if (value !== cubie[attr]) {\n                return false;\n            }\n        }\n        return true;\n        return (sel === undefined || sel === value);\n    }\n}\n\n// Transform x,y coordinates (0-based) based on\n// the number of 90 degree (clockwise) turns;\nfunction turn(x, y, turns) {\n    while (turns < 0) {\n        turns += 4;\n    }\n    while (turns > 0) {\n        [x, y] = [y, SIZE - x - 1];\n        turns -= 1;\n    }\n    return [x, y];\n}\n\n// Update the meta-data in the cubes list to reflect a rotation.\nfunction rotateCubies(cubies, axis, turns) {\n    for (let cubie of cubies) {\n        if (axis === 'x') {\n            [cubie.depth, cubie.row] = turn(cubie.depth, cubie.row, turns);\n        } else if (axis === 'y') {\n            [cubie.col, cubie.depth] = turn(cubie.col, cubie.depth, turns);\n        } else if (axis === 'z') {\n            [cubie.col, cubie.row] = turn(cubie.col, cubie.row, turns);\n        }\n    }\n}\n\ninit();\n"]}